# Generated by Django 3.2.13 on 2022-05-11 07:18
import datetime

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

from apps.routines import (
    SkinFeel,
    DietBalance,
    ExerciseHours,
    StressLevel,
    FeelingToday,
    SleepQuality,
)


def set_daily_questionnaires(apps, schema_editor):
    DailyQuestionnaire = apps.get_model("routines", "DailyQuestionnaire")
    MorningQuestionnaire = apps.get_model("routines", "MorningQuestionnaire")
    EveningQuestionnaire = apps.get_model("routines", "EveningQuestionnaire")

    user_questionnaires_on_dates = set()
    # Trying to find the tuple of user questionnaires on a particular date (i.e. Format(user_id, date) ).
    for morning_quest in MorningQuestionnaire.objects.all():
        user_questionnaires_on_dates.add(
            (morning_quest.user_id, morning_quest.created_at.date())
        )
    for evening_quest in EveningQuestionnaire.objects.all():
        user_questionnaires_on_dates.add(
            (evening_quest.user_id, evening_quest.created_at.date())
        )

    # Based on the user questionnaires tuple, filtering latest morning and evening questionnaires and combining
    # them to create DailyQuestionnaire records.
    for user_id, date in user_questionnaires_on_dates:
        # As some fields are required, so we're setting some default values for them if it is missing in
        # existing data
        data = {
            "skin_feel": SkinFeel.NORMAL,
            "diet_today": DietBalance.BALANCED,
            "water": 0,
            "stress_levels": StressLevel.RELAXED,
            "exercise_hours": ExerciseHours.ZERO,
            "feeling_today": FeelingToday.WELL,
            "hours_of_sleep": 0,
            "sleep_quality": SleepQuality.WELL,
        }
        evening_question = EveningQuestionnaire.objects.filter(
            user_id=user_id, created_at__date=date
        ).last()
        if evening_question:
            data.update(
                {
                    "skin_feel": evening_question.skin_feel,
                    "diet_today": evening_question.diet_today,
                    "water": evening_question.water,
                    "life_happened": [evening_question.life_happened]
                    if evening_question.life_happened != ""
                    else [],
                    "stress_levels": evening_question.stress_levels,
                    "exercise_hours": evening_question.exercise_hours,
                }
            )
        morning_question = MorningQuestionnaire.objects.filter(
            user_id=user_id, created_at__date=date
        ).last()
        if morning_question:
            data.update(
                {
                    "feeling_today": morning_question.feeling_today,
                    "hours_of_sleep": morning_question.hours_of_sleep,
                    "sleep_quality": morning_question.sleep_quality,
                    "something_special": [morning_question.something_special]
                    if morning_question.something_special != ""
                    else [],
                }
            )
        # As the created_at is ignoring the input while creating DailyQuestionnaire, we're updating it just after
        # creating the actual record to get the actual date of the Questionnaire
        record = DailyQuestionnaire.objects.create(**data, user_id=user_id)
        record.created_at = datetime.datetime.combine(
            date, datetime.datetime.min.time(), datetime.timezone.utc
        )
        record.save(update_fields=["created_at"])


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("routines", "0011_auto_20220411_1327"),
    ]

    operations = [
        migrations.AlterField(
            model_name="eveningquestionnaire",
            name="life_happened",
            field=models.CharField(
                blank=True,
                choices=[
                    ("COFFEE", "COFFEE"),
                    ("ALCOHOL", "ALCOHOL"),
                    ("JUNK_FOOD_AND_SWEETS", "JUNK_FOOD_AND_SWEETS"),
                    ("SMOKING", "SMOKING"),
                    ("INNOCENT", "INNOCENT"),
                ],
                default="",
                max_length=30,
            ),
        ),
        migrations.AlterField(
            model_name="morningquestionnaire",
            name="something_special",
            field=models.CharField(
                blank=True,
                choices=[
                    ("MENSTRUATION", "MENSTRUATION"),
                    ("SHAVING", "SHAVING"),
                    ("VACATION", "VACATION"),
                    ("MEET_DR", "MEET_DR"),
                    ("START_DRUG_TREATMENT", "START_DRUG_TREATMENT"),
                    ("ALLERGIE", "ALLERGIE"),
                ],
                default="",
                max_length=30,
            ),
        ),
        migrations.CreateModel(
            name="DailyQuestionnaire",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "skin_feel",
                    models.CharField(
                        choices=[
                            ("SENSITIVE", "SENSITIVE"),
                            ("GREASY", "GREASY"),
                            ("DEHYDRATED", "DEHYDRATED"),
                            ("NORMAL", "NORMAL"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "diet_today",
                    models.CharField(
                        choices=[
                            ("BALANCED", "BALANCED"),
                            ("MILDLY_BALANCED", "MILDLY_BALANCED"),
                            ("UNBALANCED", "UNBALANCED"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "water",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(3),
                        ]
                    ),
                ),
                (
                    "life_happened",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("COFFEE", "COFFEE"),
                                ("ALCOHOL", "ALCOHOL"),
                                ("JUNK_FOOD_AND_SWEETS", "JUNK_FOOD_AND_SWEETS"),
                                ("SMOKING", "SMOKING"),
                                ("INNOCENT", "INNOCENT"),
                            ],
                            max_length=30,
                        ),
                        blank=True,
                        default=list,
                        size=10,
                    ),
                ),
                (
                    "stress_levels",
                    models.CharField(
                        choices=[
                            ("EXTREME", "EXTREME"),
                            ("MODERATE", "MODERATE"),
                            ("RELAXED", "RELAXED"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "exercise_hours",
                    models.CharField(
                        choices=[
                            ("ZERO", "ZERO"),
                            ("TWENTY_MIN", "TWENTY_MIN"),
                            ("THIRTY_MIN", "THIRTY_MIN"),
                            ("FORTY_FIVE_MIN", "FORTY_FIVE_MIN"),
                            ("ONE_HOUR", "ONE_HOUR"),
                            ("ONE_AND_A_HALF_HOURS", "ONE_AND_A_HALF_HOURS"),
                            ("TWO_HOURS", "TWO_HOURS"),
                            ("TWO_PLUS", "TWO_PLUS"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "feeling_today",
                    models.CharField(
                        choices=[
                            ("BAD", "BAD"),
                            ("MEHHH", "MEHHH"),
                            ("WELL", "WELL"),
                            ("LOVE_IT", "LOVE_IT"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "hours_of_sleep",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ]
                    ),
                ),
                (
                    "sleep_quality",
                    models.CharField(
                        choices=[
                            ("BAD", "BAD"),
                            ("MEHHH", "MEHHH"),
                            ("WELL", "WELL"),
                            ("LOVE_IT", "LOVE_IT"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "something_special",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("MENSTRUATION", "MENSTRUATION"),
                                ("SHAVING", "SHAVING"),
                                ("VACATION", "VACATION"),
                                ("MEET_DR", "MEET_DR"),
                                ("START_DRUG_TREATMENT", "START_DRUG_TREATMENT"),
                                ("ALLERGIE", "ALLERGIE"),
                            ],
                            max_length=30,
                        ),
                        blank=True,
                        default=list,
                        size=10,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="daily_questionnaires",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(set_daily_questionnaires, migrations.RunPython.noop),
    ]
