# Generated by Django 3.2.13 on 2022-05-12 13:04

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

from apps.routines import RoutineType, DailyRoutineCountStatus, POINTS


def set_statistics_for_existing_daily_questionnaires(apps, schema_editor):
    am_routine_points = 25
    pm_routine_points = 25
    skin_care_attrs = ["skin_feel", "feeling_today"]
    well_being_attrs = [
        "stress_levels",
        "exercise_hours",
        "hours_of_sleep",
        "sleep_quality",
    ]
    nutrition_attrs = ["diet_today", "water", "life_happened"]
    DailyQuestionnaire = apps.get_model("routines", "DailyQuestionnaire")
    DailyStatistics = apps.get_model("routines", "DailyStatistics")

    for questionnaire in DailyQuestionnaire.objects.all():
        total_earned_routine_points = 0
        date = questionnaire.created_at.date()
        routines_on_date = questionnaire.user.routines.filter(created_at__date=date)
        has_am_routines = routines_on_date.filter(routine_type=RoutineType.AM).exists()
        has_pm_routines = routines_on_date.filter(routine_type=RoutineType.PM).exists()

        # calculating skin care routine points and setting `routine_count_status` accordingly
        if has_am_routines and has_pm_routines:
            total_earned_routine_points = am_routine_points + pm_routine_points
            routine_count_status = DailyRoutineCountStatus.COUNTING_COMPLETED
        elif has_am_routines:
            total_earned_routine_points = am_routine_points
            routine_count_status = DailyRoutineCountStatus.ONLY_AM_COUNTED
        elif has_pm_routines:
            total_earned_routine_points = pm_routine_points
            routine_count_status = DailyRoutineCountStatus.ONLY_PM_COUNTED
        else:
            routine_count_status = DailyRoutineCountStatus.NOT_COUNTED

        skin_care_points_without_routines = _calculate_points(
            questionnaire, skin_care_attrs
        )
        skin_care_points = (
            skin_care_points_without_routines + total_earned_routine_points
        )
        well_being_points = _calculate_points(questionnaire, well_being_attrs)
        nutrition_points = _calculate_points(questionnaire, nutrition_attrs)
        DailyStatistics.objects.update_or_create(
            user=questionnaire.user,
            date=date,
            defaults={
                "skin_care": skin_care_points,
                "well_being": well_being_points,
                "nutrition": nutrition_points,
                "routine_count_status": routine_count_status,
            },
        )


def _calculate_points(instance, attrs):
    """Calculates total points from an object and the given list of attributes"""
    total = 0
    for attr in attrs:
        value = getattr(instance, attr)
        if isinstance(value, list):
            # Some attrs could contain list of items
            values = []
            for item in value:
                if points := _get_points(attr, item):
                    values.append(points)
            if values:
                total += min(values)
        else:
            total += _get_points(attr, value)
    return total


def _get_points(attr, item):
    """Returns points from the point chart"""
    if attr not in POINTS:
        return 0

    if item not in POINTS[attr]:
        return 0
    return POINTS[attr][item]


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("routines", "0012_auto_20220511_0718"),
    ]

    operations = [
        migrations.CreateModel(
            name="DailyStatistics",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "skin_care",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="skin care points in percentage",
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                (
                    "well_being",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="well being points in percentage",
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                (
                    "nutrition",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="nutrition points in percentage",
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                (
                    "routine_count_status",
                    models.CharField(
                        choices=[
                            ("NOT_COUNTED", "NOT_COUNTED"),
                            ("ONLY_AM_COUNTED", "ONLY_AM_COUNTED"),
                            ("ONLY_PM_COUNTED", "ONLY_PM_COUNTED"),
                            ("COUNTING_COMPLETED", "COUNTING_COMPLETED"),
                        ],
                        max_length=30,
                    ),
                ),
                ("date", models.DateField(help_text="date for the statistics")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="daily_statistics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.AddConstraint(
            model_name="dailystatistics",
            constraint=models.UniqueConstraint(
                fields=("user", "date"), name="One statistics per day"
            ),
        ),
        migrations.RunPython(
            set_statistics_for_existing_daily_questionnaires, migrations.RunPython.noop
        ),
    ]
