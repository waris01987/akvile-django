# Generated by Django 3.2.15 on 2022-08-16 13:38
import random

from django.db import migrations

from apps.routines.predictions import (
    get_routine_prediction,
    get_daily_questionnaire_prediction,
    get_menstruation_prediction,
    get_other_predictions,
)


def set_prediction_based_on_statistics(apps, schema_editor):
    DailyStatistics = apps.get_model("routines", "DailyStatistics")
    Prediction = apps.get_model("routines", "Prediction")

    for instance in DailyStatistics.objects.all().order_by("date"):
        final_prediction_type = None
        current_date = instance.date
        if routine_prediction_type := get_routine_prediction(instance):
            final_prediction_type = routine_prediction_type
        elif daily_questionnaire_prediction_type := get_daily_questionnaire_prediction(
            instance
        ):
            final_prediction_type = daily_questionnaire_prediction_type
        elif menstruation_prediction_type := get_menstruation_prediction(instance):
            final_prediction_type = menstruation_prediction_type
        else:
            last_prediction_type = None
            last_prediction = instance.user.predictions.filter(
                date__lt=current_date
            ).first()
            if last_prediction:
                last_prediction_type = last_prediction.prediction_type
            if other_prediction_types := get_other_predictions(
                instance, last_prediction_type
            ):
                # We choose a random prediction type from calculated list of prediction types based on user inputs
                final_prediction_type = random.choice(
                    other_prediction_types
                )  # noqa: S311
        # Creates or updates prediction only if we get a prediction type based on user input.
        # We are considering updates because sometime user might create daily routines after creating
        # `DailyQuestionnaire`. In that situation, we need to recalculate the prediction and update our already made
        # prediction.
        if final_prediction_type:
            Prediction.objects.update_or_create(
                user=instance.user,
                date=current_date,
                defaults={"prediction_type": final_prediction_type},
            )


class Migration(migrations.Migration):

    dependencies = [
        ("routines", "0023_alter_healthcareevent_options"),
    ]

    operations = [
        migrations.RunPython(
            set_prediction_based_on_statistics, migrations.RunPython.noop
        ),
    ]
